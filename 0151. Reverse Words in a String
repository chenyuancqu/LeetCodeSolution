class Solution {
    public String reverseWords(String s) {
        // 1、去除多余空格
        StringBuilder sb = removeExtraSpaces(s);

        // 2、反转整个字符串
        reverseWord(sb, 0, sb.length() - 1);

        // 3、反转每个单词
        reverseEachWord(sb);
        return sb.toString();
    }

    // 去除多余空格
    public StringBuilder removeExtraSpaces(String s) {
        // 前导空格
        int start = 0, end = s.length() - 1;
        while (s.charAt(start) == ' ') {start++;}
        while (s.charAt(end) == ' ') {end--;}
        StringBuilder sb = new StringBuilder();
        for (int i = start; i <= end; i++) {
            // 当s字符不为空格，或者sb中最后一位字符不为空格（s字符为空格可以插入，不为空格更可以插入，但如果多个空格就插不进去）
            if (s.charAt(i) != ' ' || sb.charAt(sb.length() - 1) != ' ') {
                sb.append(s.charAt(i));
            }
        }
        return sb;
    }

    // 反转字符串[start,end]的字符
    public void reverseWord(StringBuilder sb, int start, int end) {
        while (start < end) {
            char temp = sb.charAt(start);
            sb.setCharAt(start, sb.charAt(end));
            sb.setCharAt(end, temp);
            start++;
            end--;
        }
    }

    // 反转每个单词
    public void reverseEachWord(StringBuilder sb) {
        int start = 0, end = 1;
        int n = sb.length();
        while (start < n) {
            // 这里数组出界
            while (end < n && sb.charAt(end) != ' ') end++;
            reverseWord(sb, start, end - 1);
            start = end + 1;
            end = start + 1;
        }
    }
}
//leetcode submit region end(Prohibit modification and deletion)
