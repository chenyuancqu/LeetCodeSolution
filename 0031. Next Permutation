class Solution {
    public void nextPermutation(int[] nums) {
        // 1. 从后向前找出第一个顺序对[i,i+1]满足nums[i]<nums[i+1]
        int i = nums.length - 2;
        while (i >= 0 && nums[i] >= nums[i+1]) {
            i--;
        }
        // 2. 从后往前查找区间[i+1,n)中找出j，满足nums[i] < nums[j]
        if (i >= 0) {
            int j = nums.length - 1;
            while (j >= 0 && nums[i] >= nums[j]) {
                j--;
            }
            swap(nums, i, j);
        }

        // 3. 交换nums[i]与nums[j]，随后将[i+1, n-1]的元素逆序
        reverse(nums, i + 1);

    }

    // 考环指定元素位置
    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    // 逆序start之后的元素， 双指针法
    public void reverse(int[] nums, int start) {
        int left = start, right = nums.length - 1;
        while (left < right) {
            swap(nums, left, right);
            left++;
            right--;
        }
    }
}
