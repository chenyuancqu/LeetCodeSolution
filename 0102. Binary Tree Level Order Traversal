/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        // 新建一个结果集
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (root == null) return res;

        // 新建一个队列用来辅助
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            // 新建一个列表存储子元素
            List<Integer> sonList = new ArrayList<>();
            // 弹出队头元素
            int size = queue.size();
            // 将队列中元素全部取出并入队其子节点元素
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                sonList.add(node.val);
                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
            }
            res.add(sonList);
        }
        return res;


    }
}
