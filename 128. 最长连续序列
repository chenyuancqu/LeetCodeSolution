// 给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。请你设计并实现时间复杂度为 O(n) 的算法解决此问题。
class Solution {
    public int longestConsecutive(int[] nums) {
        // 判断异常情况
        if (nums.length == 0 || nums == null) return 0;

        // 新建一个哈希表，key为数组元素，value为连续数字长度
        HashMap<Integer, Integer> map = new HashMap<>();

        int maxLength = 0;
        for (int num : nums) {
            if (!map.containsKey(num)) {
                // 获得左侧\右侧元素的value（连续长度）
                int leftLength = map.getOrDefault(num - 1, 0);
                int rightLength = map.getOrDefault(num + 1, 0);
                
                int length = leftLength + rightLength + 1;

                // 保持maxLength为最大
                maxLength = Math.max(maxLength, length);

                // 返回当前num的最长连续长度，并存入hashMap中
                map.put(num, length);
                // 更新连续的起始数字的连续长度为length
                map.put(num - leftLength, length);
                // 更新连续的结尾数字的连续长度为length
                map.put(num + rightLength, length);
            }
            
        }

        return maxLength;


    }
}
