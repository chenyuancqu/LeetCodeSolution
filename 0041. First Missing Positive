class Solution {
    public int firstMissingPositive(int[] nums) {
        int n = nums.length;

        if (n == 1) {
            return nums[0] == 1? 2:1;
        }
        // 首先遍历数组，将所有小于等于 0 的数置为 n+1，其中 n 是数组的长度。因为我们只关心正整数。
        for (int i = 0; i < n; i++) {
            if (nums[i] <= 0) {
                nums[i] = n + 1;
            }
        }
        // 再次遍历数组，对于每个正整数 x，将 nums[x-1]位置的数改为为负数（不改变其本身元素，所以接下来要用abs）
        //，表示 x 已经出现过。
        for (int i = 0; i < n; i++) {
            int num = Math.abs(nums[i]);
            if (num <= n) {
                nums[num - 1] = -Math.abs(nums[num - 1]);   // 这个位置的数出现过
            }
        }
        // 最后遍历数组，找到第一个 nums[i] 大于 0 的索引 i+1，即为最小的未出现的正整数。
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) return i + 1;
        }
        return n + 1;
    }
}
