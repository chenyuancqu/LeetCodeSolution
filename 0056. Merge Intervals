class Solution {
    public int[][] merge(int[][] intervals) {
        // 先对二维数组进行重新排序
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);

        // 构建一个返回数组
        List<int[]> merged = new ArrayList<int[]>();
        // 获取第一个区间
        int[] currentInterval = intervals[0];

        for (int i = 1; i < intervals.length; i++) {
            // 获取当前区间
            int[] interval = intervals[i];

            // 如果当前区间的结束位置大于等于上一个区间的起始位置，说明重合了，需要将二者合并
            if (currentInterval[1] >= interval[0]) {

                // 更新当前区间的结束位置为两个区间中较大的结束位置
                currentInterval[1] = Math.max(currentInterval[1], interval[1]);
            } else {
                // 如果不重叠，则将当前区间放入结果中，并将当前区间更新为下一个区间
                merged.add(currentInterval);
                currentInterval = interval;
            }
        }

        merged.add(currentInterval);

        return merged.toArray(new int[merged.size()][]);



    }

}
