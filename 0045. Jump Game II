class Solution {
    public int jump(int[] nums) {
        // 思路：还是维护一个可到达最远距离与当前最远距离，如果最远距离无法超过n则step++来继续维护最远距离
        int res = 0;
        int end = 0, temp = 0;
        // 如果end（步数内可达最远距离在nums之内，则返回结果）
        // 这里已经通过end记录了每一步可以到达的最远位置，无需实际跳跃到那个位置进行判断
        for (int i = 0; i < nums.length - 1; i++) {
            // 更新最远可到达距离
            temp = Math.max(temp, nums[i] + i);
            // 如果单次到达最远可到达距离，则步数+1，重新更新最远可到达距离
            if (i == end) {
                end = temp;
                res++;
            }
        }
        return res;

    }
}
