// 整体思路：使用DFS+剪枝+回溯的方式
class Solution {
    Boolean result = false;
    public boolean exist(char[][] board, String word) {
        char[] words = word.toCharArray();
        // 开头可以从board内的任何一个格子开始
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (dfs(board, words, i, j, 0)) return true;
            }
        }
        return false;
    }

    public boolean dfs(char[][] board, char[] words, int i, int j, int k) {
        // 终止条件
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] != words[k]) return false;
        if (k >= words.length - 1) return true;
        // 剪枝：防止已访问过的元素参与
        board[i][j] = '\0';
        boolean res = dfs(board, words, i + 1, j, k + 1) || dfs(board, words, i - 1, j, k + 1)
                || dfs(board, words, i, j - 1, k + 1) || dfs(board, words, i, j + 1, k + 1);
        board[i][j] = words[k];
        return res;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
