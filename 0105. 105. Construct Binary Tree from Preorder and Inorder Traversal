import java.util.HashMap;

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    // 将中序遍历中的元素全部存入hashMap中方便进行O（1）提取
    private HashMap<Integer, Integer> inOrderMap;

    /**
     * 求二叉树的子树
     * @param preorder 前序数组
     * @param inorder 中序数组
     * @param preorder_left 所在子树的前序数组左边界
     * @param preorder_right 所在子树的前序数组右边界
     * @param inorder_left 所在子树的中序数组左边界
     * @param inorder_right 所在子树的中序数组右边界
     * @return 返回根节点
     */
    public TreeNode mybuildTree(int[] preorder, int[] inorder, int preorder_left, int preorder_right,
                                int inorder_left, int inorder_right) {
        if (preorder_left > preorder_right) {return null;}

        // 前序遍历的第一个元素就是根节点
        int preorder_root = preorder_left;
        // 在中序遍历中定位根节点
        int inorder_root = inOrderMap.get(preorder[preorder_left]);

        // 构建根节点
        TreeNode root = new TreeNode(preorder[preorder_root]);

        // 构建左子树
        int leftSubTree = inorder_root - inorder_left;
        root.left = mybuildTree(preorder, inorder, preorder_left + 1, preorder_left + leftSubTree, inorder_left, inorder_root - 1);
        root.right = mybuildTree(preorder, inorder, preorder_left + leftSubTree + 1, preorder_right, inorder_root + 1, inorder_right);
        return root;
    }


    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // 思路：递归法，通过前序遍历找到根结点，随后根据中序遍历区分左右子树，递归求解

        // 1. inorder放入hashMap中
        int n = inorder.length;
        inOrderMap = new HashMap<Integer, Integer>();
        for (int i = 0; i < n; i++) {
            inOrderMap.put(inorder[i], i);
        }

        // 2. 调用方法进行构造
        return mybuildTree(preorder, inorder, 0, n - 1, 0, n - 1);

    }
}
