/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        // 双指针法

        // Set<ListNode> visited = new HashSet<>();
        // ListNode temp = headA;
        // while (temp.next != null) {
        //     visited.add(temp);
        //     temp = temp.next;   // 链表后移
        // }

        // temp = headB;   // 赋值给headB的头节点
        // while (temp.next != null) {
        //     if (visited.contains(temp)) {
        //         return temp;    //第一个相同的结点，即为相交结点
        //     }
        //     temp = temp.next;
        // }

        // return null;
        // 双指针
        ListNode pA = headA;
        ListNode pB = headB;
        while(pA != pB) {
            pA = pA == null ? headB : pA.next;
            pB = pB == null ? headA : pB.next;
        }
        return pA;
        
    }
}
