/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        /* // 递归法
        if (list1 == null) {
            return list2;
        } else if (list2 == null) {
            return list1;
        } else if (list1.val < list2.val) {
            list1.next = mergeTwoLists(list1.next, list2);
            return list1;   //  返回给搞完的list1
        } else {
            list2.next = mergeTwoLists(list2.next, list1);
            return list2;
        }
        */

        // 迭代法
        ListNode prehead = new ListNode(-1);

        ListNode prev = prehead;

        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                prev.next = list1;
                list1 = list1.next;
            } else {
                prev.next = list2;
                list2 = list2.next;
            }
            prev = prev.next;
        }

        // 此时合并结束时，如果两个链表不等长，则会剩下一个链表有东西
        prev.next = list1 == null ? list2 : list1;

        return prehead.next;
    }
}
